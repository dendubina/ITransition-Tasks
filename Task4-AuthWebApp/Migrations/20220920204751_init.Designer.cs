// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task4AuthWebApp.EF;

namespace Task4AuthWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220920204751_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Task4AuthWebApp.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSignInDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SignUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "853250a1-d5f2-4330-bf98-b446d061cb19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "579eaf6e-3ae5-44c5-864a-36943f1979ea",
                            Email = "london_lesc3@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 344, DateTimeKind.Local).AddTicks(771),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9da61019-6f1e-4c85-8ecf-634d155f436c",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(4677),
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Genie"
                        },
                        new
                        {
                            Id = "1363ae6c-597e-47f5-84e6-96917a926231",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb0ffb18-f4d9-4e43-b834-a908465dc097",
                            Email = "haylee.nitzsc@yahoo.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5683),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35cd8052-0fa9-4249-b858-614aca3e6b0c",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5689),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Anthony"
                        },
                        new
                        {
                            Id = "f9929caf-fae3-46f9-af53-22cba9f54ae9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fba9b2f-163a-4b6c-988c-7ec1fdc8773f",
                            Email = "harvey1982@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5714),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48189ac2-87fa-4887-843d-be0b2e21fdb3",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5715),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Kelly"
                        },
                        new
                        {
                            Id = "bf8d6112-e4c9-44eb-b5cc-29f437d89032",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffa067b2-bc94-41ac-b77b-34fc0b4dd6df",
                            Email = "daisy_bernha@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5724),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd5f4a35-bbfc-4a64-9cb5-506cd7e1bfa9",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5725),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Paul"
                        },
                        new
                        {
                            Id = "e3b655e1-af48-4710-86c3-a49322d366b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9a5137a-2b1b-4921-a637-2a1bc6949fee",
                            Email = "rosa_turne6@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5734),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8722a07a-bf49-4fe7-bb2c-cb1f3bcc38be",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5735),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Freida"
                        },
                        new
                        {
                            Id = "060a25b8-398f-45af-b696-c73b59b9f9d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7e582ff-25e3-4490-9488-7aebe5d7cd3a",
                            Email = "colin_lin6@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5753),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c343c185-ac70-475c-92d9-88b61c58f675",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5755),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Margaret"
                        },
                        new
                        {
                            Id = "60f68b9e-21fc-4caf-a8f6-2c3ce1c9435e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ef7021b-9a51-426e-aaa5-a0806efbd7e6",
                            Email = "arjun_kertzma@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5763),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a918893-1ef1-43fa-941a-3beb8acad132",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5764),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Peter"
                        },
                        new
                        {
                            Id = "15094e1d-7cf8-4f8e-bdb4-a301eacb9597",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85ccddda-b39c-4efa-8f75-f754038bc4da",
                            Email = "emil2002@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5773),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dc19657-9197-4936-8e9f-2539b194b9d9",
                            SignUpDate = new DateTime(2022, 9, 20, 23, 47, 51, 345, DateTimeKind.Local).AddTicks(5774),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Deloris"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Task4AuthWebApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Task4AuthWebApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task4AuthWebApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Task4AuthWebApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
